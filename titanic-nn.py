{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\ndata = pd.read_csv('/kaggle/input/titanic/train.csv')","metadata":{"_uuid":"5dc2c2a3-b111-4e9d-8d80-e3dc0f1e128d","_cell_guid":"9328ff4d-4a7a-408b-980d-cc21fc355f53","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-09-25T11:23:30.159767Z","iopub.execute_input":"2023-09-25T11:23:30.160144Z","iopub.status.idle":"2023-09-25T11:23:30.175113Z","shell.execute_reply.started":"2023-09-25T11:23:30.160116Z","shell.execute_reply":"2023-09-25T11:23:30.173936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%config Completer.use_jedi = False","metadata":{"_uuid":"3e7502e3-b091-455f-b484-3fad87c6ef37","_cell_guid":"ccb168d4-ea21-4fc2-9ed1-a327d12e53f1","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-09-25T11:23:30.192148Z","iopub.execute_input":"2023-09-25T11:23:30.192503Z","iopub.status.idle":"2023-09-25T11:23:30.201413Z","shell.execute_reply.started":"2023-09-25T11:23:30.192475Z","shell.execute_reply":"2023-09-25T11:23:30.200200Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = np.array(data)\nm, n = data.shape\n#np.random.shuffle(data) # shuffle before splitting into dev and training sets\n\ndef fixData(Z):\n    Z_copy = Z.copy()  # Create a copy to avoid modifying the original array\n    for arr in Z_copy:\n        if arr[1] == \"male\":\n            arr[1] = 0\n        else:\n            arr[1] = 1\n    for el in Z_copy:\n        if np.isnan(el[2]):\n            el[2] = 30  # average age\n    return Z_copy\n\n# Split data into development and training sets\ndata_dev = data[5:]\ndata_train = data[:50]\n\n# Extract features and labels\nY_dev = data_dev[:, 1].astype(int)\nX_dev = np.delete(data_dev, [0, 1, 3, 6, 7, 8, 10, 11], axis=1)\nX_dev = fixData(X_dev).T.astype(float)\n\nY_train = data_train[:, 1].astype(int)\nX_train = np.delete(data_train, [0, 1, 3, 6, 7, 8, 10, 11], axis=1)\nX_train = fixData(X_train).T.astype(float)\n\nprint(Y_train.shape)\nprint(X_train.shape)\n","metadata":{"_uuid":"f72cc276-8902-450f-b616-fb87e02ab718","_cell_guid":"09fdba44-6ffa-4314-bc64-e4444e1d0140","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-09-25T11:23:30.211825Z","iopub.execute_input":"2023-09-25T11:23:30.212181Z","iopub.status.idle":"2023-09-25T11:23:30.227517Z","shell.execute_reply.started":"2023-09-25T11:23:30.212153Z","shell.execute_reply":"2023-09-25T11:23:30.226725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def init_params():\n    W1 = np.random.rand(2, 4) - 0.5\n    b1 = np.random.rand(2, 1) - 0.5\n    W2 = np.random.rand(2, 2) - 0.5\n    b2 = np.random.rand(2, 1) - 0.5\n    return W1, b1, W2, b2\n\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef sigmoid(Z):\n    return 1/(1+np.exp(-Z))\n\ndef sigmoid_deriv(Z):\n    return Z * (1 - Z)\n\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1 / m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    #dZ1 = W2.dot(dZ2)*sigmoid_deriv(Z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1 / m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2","metadata":{"_uuid":"4061a0fa-95d0-4b0c-993f-7e61a9d4ce75","_cell_guid":"653efacb-615f-41ee-a48a-aa326afec83f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-09-25T11:23:30.259217Z","iopub.execute_input":"2023-09-25T11:23:30.259929Z","iopub.status.idle":"2023-09-25T11:23:30.276056Z","shell.execute_reply.started":"2023-09-25T11:23:30.259859Z","shell.execute_reply":"2023-09-25T11:23:30.274890Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 1000 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2","metadata":{"_uuid":"ef02b139-10a5-47f8-b163-1d7837656700","_cell_guid":"bf5beacc-6ea8-45b5-bb88-a500a8813150","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-09-25T11:23:30.331891Z","iopub.execute_input":"2023-09-25T11:23:30.332257Z","iopub.status.idle":"2023-09-25T11:23:30.341583Z","shell.execute_reply.started":"2023-09-25T11:23:30.332221Z","shell.execute_reply":"2023-09-25T11:23:30.340257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.100, 100000)","metadata":{"_uuid":"64445c50-e546-40ea-b8a3-b64847513571","_cell_guid":"4998f5ab-f4d3-4147-ab81-a6ab64b062ad","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    print(\"A2: \", A2)\n    predictions = get_predictions(A2)\n    return predictions\n\ndef test_prediction(index, W1, b1, W2, b2):\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", \"Alive\" if label==1 else \"Dead\")\n    ","metadata":{"execution":{"iopub.status.busy":"2023-09-25T11:23:54.088426Z","iopub.execute_input":"2023-09-25T11:23:54.088784Z","iopub.status.idle":"2023-09-25T11:23:54.096463Z","shell.execute_reply.started":"2023-09-25T11:23:54.088756Z","shell.execute_reply":"2023-09-25T11:23:54.094948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_prediction(1, W1, b1, W2, b2)\ntest_prediction(2, W1, b1, W2, b2)\ntest_prediction(5, W1, b1, W2, b2)","metadata":{"execution":{"iopub.status.busy":"2023-09-25T11:24:31.819532Z","iopub.execute_input":"2023-09-25T11:24:31.819913Z","iopub.status.idle":"2023-09-25T11:24:31.827104Z","shell.execute_reply.started":"2023-09-25T11:24:31.819885Z","shell.execute_reply":"2023-09-25T11:24:31.826048Z"},"trusted":true},"execution_count":null,"outputs":[]}]}